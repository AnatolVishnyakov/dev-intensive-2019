package ru.skillbranch.devintensive.ui.profile

import android.os.Bundle
import android.util.Log
import android.view.View
import androidx.appcompat.app.AppCompatActivity
import ru.skillbranch.devintensive.R

class ProfileActivity : AppCompatActivity() {

    /**
     * Вызывается при первом создании или перезапуске Activity.
     *
     * Здесь задаётся внешний вид активности (UI) через метод setContentView().
     * - инициализируются представления;
     * - представления связываются с необходимыми данными и ресурсами;
     * - связываются данные со списками.
     *
     * Этот метод также представляет Bundle, содержащий ранее сохраненное
     * состояние Activity, если оно было.
     *
     * Всегда сопровождается вызовом onStart().
     * */
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_profile)
    }

    /**
     * Если Activity возвращается в приоритетный режим после вызова onStop(),
     * то в этом случае вызывается onRestart(), т.е. вызывается после того,
     * как Activity была остановлена и снова была запущена пользователем.
     *
     * Всегда сопровождается вызовом метода onStart().
     * Используется для специльных действий, которые должны выполняться
     * только при повторном запуске Activity.
     * */
    override fun onRestart() {
        super.onRestart()
        Log.d("M_MainActivity", "onRestart")
    }

    /**
     * При вызове onStart() окно ещё не видно пользователю, но вскоре будет видно.
     * Вызывается непосредственно перед тем, как активность становится видной пользователю.
     *
     * - Чтение из базы данных.
     * - Запуск сложной анимации.
     * - Запуск потоков, отслеживание показаний датчиков, запросов к GPS, таймеров,
     * сервисов или других процессов, которые нужны исключительно для обновления
     * пользовательского интерфейса.
     *
     * Затем следует onResume(), если Activity выходит на передний план.
     * */
    override fun onStart() {
        super.onStart()
        Log.d("M_MainActivity", "onStart")
    }

    /**
     * Вызывается, когда Activity начнет взаимодействовать с пользователем.
     *
     * - Запуск воспроизведения анимации, аудио/видео.
     * - Регистрация любых BroadcastReceiver или других процессов, которые
     * вы освободили/приостановили в onPause().
     * - Выполнение любых других инициализаций, которые должны происходить,
     * когда Activity вновь активна (камера).
     *
     * Тут должен быть максимально легкий и быстрый код, чтобы приложение
     * оставалось отзывчивым.
     * */
    override fun onResume() {
        super.onResume()
        Log.d("M_MainActivity", "onResume")
    }

    /**
     * Метод onPause() вызывается после сворачивания текущей активности
     * или перехода к новому.
     * От onPause() можно перейти к вызову либо onResume(), либо onStop().
     *
     * - Остановка анимации, аудио/видео.
     * - Сохранение состояния пользовательского ввода (легкие процессы).
     * - Сохранение в DB, если данные должны быть доступны в новой Activity.
     * - Остановка сервисов, подписок, BroadcastReceiver.
     *
     * Тут должен быть максимально легкий и быстрый код, чтобы приложение
     * оставалось отзывчивым.
     * */
    override fun onPause() {
        super.onPause()
        Log.d("M_MainActivity", "onPause")
    }

    /**
     * Метод onStop() вызывается, когда Activity становится невидимым
     * для пользователя.
     * Это может произойти при её уничтожении, или если была запущена
     * другая Activity (существующая или новая), перекрывшая окно
     * текущей Activity.
     *
     * - Запись в базу данных.
     * - Приостановка сложной анимации.
     * - Приостановка потоков, отслеживание показаний датчиков, запросов
     * к GPS, таймеров, сервисов или других процессов, которые нужны
     * исключительно для обновления пользовательского интерфейса.
     *
     * Не вызывается при вызове метода Activity.finish().
     * */
    override fun onStop() {
        super.onStop()
        Log.d("M_MainActivity", "onStop")
    }

    /**
     * Метод вызывается по окончании работы Activity, при вызове
     * метода finish() или в случае, когда система уничтожает этот
     * экземпляр активности для освобождения ресурса.
     * */
    override fun onDestroy() {
        super.onDestroy()
        Log.d("M_MainActivity", "onDestroy")
    }

    /**
     * Этот метод сохраняет состояние представления в Bundle.
     * Для API Level < 28 (Android P), этот метод будет выполняться
     * до onStop(), и нет никаких гарантий относительно того,
     * произойдет ли это до или после onPause().
     *
     * Для API Level > 28 будет вызван после onStop().
     * Не будет вызван, если Activity будет явно закрыто пользователем,
     * при нажатии на системную клавишу back.
     * */
    override fun onSaveInstanceState(outState: Bundle) {
        super.onSaveInstanceState(outState)
    }
}